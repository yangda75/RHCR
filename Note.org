#+TITLE: 笔记


* 地图格式
** .map
纯文本文档。第一行有两个数字，表示行数和列数
[[./maps/kiva.map::1]]
[[./src/KivaGraph.cpp::112]]
第二行：endpoint数量
第三行：agent_num
第四行：maxtime

下面的字符表示地图点的类别：
- =r= 机器人休息点
- =e= endpoint
- =.= 可以通过的点
- =@= 障碍物
* 数据结构
格点地图的坐标，i,j，在代码中转化成 i*cols + j 存储
从上往下，从左往右
=State= 中的location
=goal_location= 中的first
* KivaGrid::preprocessing
[[./src/KivaGraph.cpp::187]]
先尝试从文件中读取，尝试读取文件
- {map_name}_rotation_heuristics_table.txt
- {map_name}_heuristics_table.txt
读取成功，就调用 =load_heuristics_table=
读不到，或者加载失败，就计算。
对home和endpoint，调用 =BasicGraph::compute_heuristics= 计算
[[./src/BasicGraph.cpp::169]]
算完之后存到文件中
* PBS::generate_root_node
[[./src/PBS.cpp::450]]
** 变量：
*** dummy_start: 空的PBSNode
*** screen
todo
*** initial_paths
[[./src/PBS.cpp::462]]
[[./inc/MAPFSolver.h::24]]
[[./src/BasicSystem.cpp::209]]
通过update_initial_paths更新，但是没有地方调用这个函数
*** paths
* SIPP::run
流程：
1. 构造初始节点，放入open和focal
2. 在focal非空时，执行下列逻辑：
   - 将focal_list的堆顶节点出队，并且从open_list中删除对应节点
   - 判断当前节点是否是目标，如果是，调用 updatePath 生成路线，结束
   - 对四个方向，生成新的节点，对所有的安全时间窗，都生成一个节点
     扩展的节点数量 sum(IntervalCount(Direction))
   - 根据open_list中的f value 更新focal_bound，将大于原先focalbound且小于当前
     focalbound的节点加入focal_list

** start的timestep不能是-1,会导致越界访问
** FOCAL
[[./inc/SIPP.h::24]]
1. 比较 =conflicts= ，小的好
2. 比较 =g_val+h_val= ，小的好
3. 比较 =g_val= ，大的好
** conflicts
[[./src/SIPP.cpp::258]]
interval中最多有一个，加上当前节点已经有的，就是新节点的conflict
用于pbs的 [[./src/ReservationTable.cpp::243][ReservationTable::build]]
首先调用 insertPath2CT 将高优先级的机器人作为"hard conflicts"加入 ct
[[./src/SIPP.cpp::252]]
然后调用 insertPath2CAT 将其他机器人的路线作为 "soft conflicts" 加入 cat
[[./src/SIPP.cpp::272]]
** 节点生成
1. [[./src/ReservationTable.cpp::405][RT::getSafeIntervals(from,to,lb,ub)]]
   先计算to节点和 from,to 边的安全窗口
   然后取交集
2. 计算点的安全窗口
   updateSIT(location)
   返回满足lb,ub的窗口列表
3. 计算边的安全窗口
   updateSIT(location)
   返回满足lb,ub的窗口列表
4. updateSIT
   如果sit中有这个点/边，就结束
   如果有ct，对ct中的每个时间段，调用insertConstraint2SIT
   调用对cat，执行insertSoftConstraint2SIT，这一步后，是否需要调用mergeInterval?
5. insertConstraint2SIT(location, tmin, tmax)
   所有更新/修改的interval，coflict都为false，即硬冲突
   如果sit[location] 为空,加入[0,tmin),[tmax,inf)，结束
   对sit[location]中的所有时间窗 i:
   - tmin >= imax，跳过
   - tmax <= imin,结束
   - imin < tmin && imax <= tmax, 更新 i = [imin,tmin)，继续
   - tmin <= imin && tmax < imax, 更新 i = [tmax,imax)，结束
   - imin < tmin && tmax < imax, 插入 [imin, tmin), 更新 i = [tmax, imax)，结束
   - 否则，即 tmin <= imin && tmax >= imax，删除i
6. insertSoftConstraint2SIT(locaton, tmin, tmax)
   如果sit[location]为空，加入[0,tmin,false), [tmin,tmax,true), [tmax,inf,false)，结束
   对sit[location]中的所有时间窗 i:
   - tmin >= imax 跳过
   - tmax <= imin 结束
   - i.conflict，跳过
   - imin < tmin && imax < tmax, 插入[imin, tmin, false), 更新i=[tmin, imax, true)
   - tmin <= imin && tmax < imax, 插入[imin, tmax, true), 更新i[tmax, imax, false)
   - imin < tmin && tmax < imax,插入[imin, tmin, false), [tmin, tmax, true), i=[tmax, imax,false)
   - 否则，即 tmin <= imin && tmax >= imax, i=[imin,imax, true)

* sipp_demo 流程
1. 读取地图：
   - KivaGrid::load
   - KivaGrid::preprocessing 计算启发
2. 构造 ReservationTable, 设置参数
3. 计算高优先级的机器人路线
   - rt.clear
   - rt.build
   - sipp.run
   - paths[i] = path
4. 计算低优先级的机器人路线
